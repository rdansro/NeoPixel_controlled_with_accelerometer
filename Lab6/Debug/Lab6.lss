
Lab6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000044c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003f8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000044c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000047c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  000004c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e34  00000000  00000000  00000530  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000093a  00000000  00000000  00001364  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006ee  00000000  00000000  00001c9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000ec  00000000  00000000  0000238c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004b4  00000000  00000000  00002478  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000064d  00000000  00000000  0000292c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00002f79  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	fb d0       	rcall	.+502    	; 0x290 <main>
  9a:	ac c1       	rjmp	.+856    	; 0x3f4 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>
	.org 0x00
result: .byte
.section .text
.global write_rgb
	.org 0x00
	rjmp write_rgb
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <write_rgb>

000000a0 <write_rgb>:


write_rgb:
	LDI r30, 0b00000001
  a0:	e1 e0       	ldi	r30, 0x01	; 1
    OUT DDRB, r30      ; Set port as output
  a2:	e4 b9       	out	0x04, r30	; 4
	LDI R18, 0b10000000
  a4:	20 e8       	ldi	r18, 0x80	; 128
	MOV R22, R22 ;moves Green value to correct register
  a6:	66 2f       	mov	r22, r22
	MOV R21, R24 ;moves Red value to correct register
  a8:	58 2f       	mov	r21, r24
	MOV R23, R20 ;moves Blue value to correct register
  aa:	74 2f       	mov	r23, r20

000000ac <wg_start>:

wg_start:
	MOV R24, R22
  ac:	86 2f       	mov	r24, r22
	AND R24, R18
  ae:	82 23       	and	r24, r18
	BRNE wg_one
  b0:	11 f4       	brne	.+4      	; 0xb6 <wg_one>
	CALL zero
  b2:	1a d0       	rcall	.+52     	; 0xe8 <zero>
	RJMP wg_loop
wg_one:
	CALL one
  b4:	02 c0       	rjmp	.+4      	; 0xba <wg_loop>

000000b6 <wg_one>:
  b6:	27 d0       	rcall	.+78     	; 0x106 <one>
	RJMP wg_loop
  b8:	00 c0       	rjmp	.+0      	; 0xba <wg_loop>

000000ba <wg_loop>:
wg_loop:
	LSR R18
  ba:	26 95       	lsr	r18
	BRNE wg_start
  bc:	b9 f7       	brne	.-18     	; 0xac <wg_start>

	LDI R18, 0b10000000
  be:	20 e8       	ldi	r18, 0x80	; 128

000000c0 <wr_start>:
wr_start:
	MOV R24, R21
  c0:	85 2f       	mov	r24, r21
	AND R24, R18
	BRNE wr_one
  c2:	82 23       	and	r24, r18
	CALL zero
  c4:	11 f4       	brne	.+4      	; 0xca <wr_one>
	RJMP wr_loop
  c6:	10 d0       	rcall	.+32     	; 0xe8 <zero>
wr_one:
	CALL one
  c8:	02 c0       	rjmp	.+4      	; 0xce <wr_loop>

000000ca <wr_one>:
  ca:	1d d0       	rcall	.+58     	; 0x106 <one>
	RJMP wr_loop
  cc:	00 c0       	rjmp	.+0      	; 0xce <wr_loop>

000000ce <wr_loop>:
wr_loop:
	LSR R18
  ce:	26 95       	lsr	r18
	BRNE wr_start
  d0:	b9 f7       	brne	.-18     	; 0xc0 <wr_start>

	LDI R18, 0b10000000
wb_start:
	MOV R24, R23
  d2:	20 e8       	ldi	r18, 0x80	; 128

000000d4 <wb_start>:
	AND R24, R18
	BRNE wb_one
  d4:	87 2f       	mov	r24, r23
	CALL zero
  d6:	82 23       	and	r24, r18
  d8:	11 f4       	brne	.+4      	; 0xde <wb_one>
	RJMP wb_loop
  da:	06 d0       	rcall	.+12     	; 0xe8 <zero>
wb_one:
	CALL one
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <wb_loop>

000000de <wb_one>:
  de:	13 d0       	rcall	.+38     	; 0x106 <one>
	RJMP wb_loop
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <wb_loop>

000000e2 <wb_loop>:
wb_loop:
	LSR R18
  e2:	26 95       	lsr	r18
	BRNE wb_start
  e4:	b9 f7       	brne	.-18     	; 0xd4 <wb_start>
	ret
  e6:	08 95       	ret

000000e8 <zero>:

zero:
	ldi r20, 0b00000001
  e8:	41 e0       	ldi	r20, 0x01	; 1
	out PORTB, r20
  ea:	45 b9       	out	0x05, r20	; 5
	...
	nop
	nop
	nop
	nop
	ldi r20, 0b00000000
  f4:	40 e0       	ldi	r20, 0x00	; 0
	out PORTB, r20
  f6:	45 b9       	out	0x05, r20	; 5
	...
	nop
	nop
	nop
	nop
	nop
	ret
 104:	08 95       	ret

00000106 <one>:

one:
	ldi r20, 0b00000001
 106:	41 e0       	ldi	r20, 0x01	; 1
	out PORTB, r20
 108:	45 b9       	out	0x05, r20	; 5
	...
	nop
	nop
	nop
	nop
	nop
	ldi r20, 0b00000000
 11e:	00 00       	nop
	out PORTB, r20
 120:	40 e0       	ldi	r20, 0x00	; 0
	ret
 122:	45 b9       	out	0x05, r20	; 5

delay_more:
	ldi r26, 15
 124:	08 95       	ret

00000126 <delay_more>:
delay_m:
	call delay_small
 126:	af e0       	ldi	r26, 0x0F	; 15

00000128 <delay_m>:
 128:	03 d0       	rcall	.+6      	; 0x130 <delay_small>
	dec r26
 12a:	aa 95       	dec	r26
	brne delay_m
 12c:	e9 f7       	brne	.-6      	; 0x128 <delay_m>
	ret
 12e:	08 95       	ret

00000130 <delay_small>:

delay_small:
	ldi r27, 255
 130:	bf ef       	ldi	r27, 0xFF	; 255

00000132 <delay>:
	...
	nop
	nop
	nop
	dec r27
	brne delay
    ret
 13a:	ba 95       	dec	r27

rgb:
	LDI R21, 0xFF ;Red
 13c:	d1 f7       	brne	.-12     	; 0x132 <delay>
	LDI R22, 0x1  ;Green
 13e:	08 95       	ret

00000140 <rgb>:
	LDI R23, 1    ;Blue
 140:	5f ef       	ldi	r21, 0xFF	; 255
	CALL write_rgb
 142:	61 e0       	ldi	r22, 0x01	; 1
 144:	71 e0       	ldi	r23, 0x01	; 1

here: jmp here
 146:	ac df       	rcall	.-168    	; 0xa0 <write_rgb>

00000148 <here>:
 148:	ff cf       	rjmp	.-2      	; 0x148 <here>

0000014a <ADC_Init>:
	while (str[i]) {
		USART_Transmit(str[i]);
		i++;
		_delay_ms(50);
	}
}
 14a:	ea e7       	ldi	r30, 0x7A	; 122
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	80 81       	ld	r24, Z
 150:	87 60       	ori	r24, 0x07	; 7
 152:	80 83       	st	Z, r24
 154:	ac e7       	ldi	r26, 0x7C	; 124
 156:	b0 e0       	ldi	r27, 0x00	; 0
 158:	8c 91       	ld	r24, X
 15a:	80 64       	ori	r24, 0x40	; 64
 15c:	8c 93       	st	X, r24
 15e:	8c 91       	ld	r24, X
 160:	80 62       	ori	r24, 0x20	; 32
 162:	8c 93       	st	X, r24
 164:	80 81       	ld	r24, Z
 166:	80 68       	ori	r24, 0x80	; 128
 168:	80 83       	st	Z, r24
 16a:	08 95       	ret

0000016c <ADC_read>:
 16c:	ec e7       	ldi	r30, 0x7C	; 124
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	90 81       	ld	r25, Z
 172:	90 7f       	andi	r25, 0xF0	; 240
 174:	90 83       	st	Z, r25
 176:	90 81       	ld	r25, Z
 178:	89 2b       	or	r24, r25
 17a:	80 83       	st	Z, r24
 17c:	ea e7       	ldi	r30, 0x7A	; 122
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	80 81       	ld	r24, Z
 182:	80 64       	ori	r24, 0x40	; 64
 184:	80 83       	st	Z, r24
 186:	80 81       	ld	r24, Z
 188:	84 ff       	sbrs	r24, 4
 18a:	fd cf       	rjmp	.-6      	; 0x186 <ADC_read+0x1a>
 18c:	ea e7       	ldi	r30, 0x7A	; 122
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	80 81       	ld	r24, Z
 192:	80 61       	ori	r24, 0x10	; 16
 194:	80 83       	st	Z, r24
 196:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 19a:	08 95       	ret

0000019c <callibration>:
* @param gmin memory address of minimum g value
* @param bmin memory address of minimum b value
**/
void callibration(int *rmax, int *rmin,
int *gmax, int *gmin, int *bmax, int *bmin)
{
 19c:	6f 92       	push	r6
 19e:	7f 92       	push	r7
 1a0:	8f 92       	push	r8
 1a2:	9f 92       	push	r9
 1a4:	af 92       	push	r10
 1a6:	bf 92       	push	r11
 1a8:	cf 92       	push	r12
 1aa:	df 92       	push	r13
 1ac:	ef 92       	push	r14
 1ae:	ff 92       	push	r15
 1b0:	0f 93       	push	r16
 1b2:	1f 93       	push	r17
 1b4:	cf 93       	push	r28
 1b6:	df 93       	push	r29
 1b8:	6c 01       	movw	r12, r24
 1ba:	4b 01       	movw	r8, r22
 1bc:	ea 01       	movw	r28, r20
 1be:	59 01       	movw	r10, r18
 1c0:	37 01       	movw	r6, r14
 1c2:	0f 2e       	mov	r0, r31
 1c4:	f8 ee       	ldi	r31, 0xE8	; 232
 1c6:	ef 2e       	mov	r14, r31
 1c8:	f3 e0       	ldi	r31, 0x03	; 3
 1ca:	ff 2e       	mov	r15, r31
 1cc:	f0 2d       	mov	r31, r0
	int r = 0, g = 0, b = 0, i;
	for (i = 0; i < 1000; i++) {
		r = ADC_read(0);
 1ce:	80 e0       	ldi	r24, 0x00	; 0
 1d0:	cd df       	rcall	.-102    	; 0x16c <ADC_read>
 1d2:	90 e0       	ldi	r25, 0x00	; 0
		if (r > *rmax)
 1d4:	f6 01       	movw	r30, r12
 1d6:	20 81       	ld	r18, Z
 1d8:	31 81       	ldd	r19, Z+1	; 0x01
 1da:	28 17       	cp	r18, r24
 1dc:	39 07       	cpc	r19, r25
 1de:	1c f4       	brge	.+6      	; 0x1e6 <callibration+0x4a>
		*rmax = r;
 1e0:	91 83       	std	Z+1, r25	; 0x01
 1e2:	80 83       	st	Z, r24
 1e4:	08 c0       	rjmp	.+16     	; 0x1f6 <callibration+0x5a>
		else if (r < *rmin)
 1e6:	f4 01       	movw	r30, r8
 1e8:	20 81       	ld	r18, Z
 1ea:	31 81       	ldd	r19, Z+1	; 0x01
 1ec:	82 17       	cp	r24, r18
 1ee:	93 07       	cpc	r25, r19
 1f0:	14 f4       	brge	.+4      	; 0x1f6 <callibration+0x5a>
		*rmin = r;
 1f2:	91 83       	std	Z+1, r25	; 0x01
 1f4:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f6:	8f e6       	ldi	r24, 0x6F	; 111
 1f8:	97 e1       	ldi	r25, 0x17	; 23
 1fa:	01 97       	sbiw	r24, 0x01	; 1
 1fc:	f1 f7       	brne	.-4      	; 0x1fa <callibration+0x5e>
 1fe:	00 c0       	rjmp	.+0      	; 0x200 <callibration+0x64>
 200:	00 00       	nop

		_delay_us(1500);
		g = ADC_read(1);
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	b3 df       	rcall	.-154    	; 0x16c <ADC_read>
 206:	90 e0       	ldi	r25, 0x00	; 0
		if (g > *gmax)
 208:	28 81       	ld	r18, Y
 20a:	39 81       	ldd	r19, Y+1	; 0x01
 20c:	28 17       	cp	r18, r24
 20e:	39 07       	cpc	r19, r25
 210:	1c f4       	brge	.+6      	; 0x218 <callibration+0x7c>
		*gmax = g;
 212:	99 83       	std	Y+1, r25	; 0x01
 214:	88 83       	st	Y, r24
 216:	08 c0       	rjmp	.+16     	; 0x228 <callibration+0x8c>
		else if (g < *gmin)
 218:	f5 01       	movw	r30, r10
 21a:	20 81       	ld	r18, Z
 21c:	31 81       	ldd	r19, Z+1	; 0x01
 21e:	82 17       	cp	r24, r18
 220:	93 07       	cpc	r25, r19
 222:	14 f4       	brge	.+4      	; 0x228 <callibration+0x8c>
		*gmin = g;
 224:	91 83       	std	Z+1, r25	; 0x01
 226:	80 83       	st	Z, r24
 228:	8f e6       	ldi	r24, 0x6F	; 111
 22a:	97 e1       	ldi	r25, 0x17	; 23
 22c:	01 97       	sbiw	r24, 0x01	; 1
 22e:	f1 f7       	brne	.-4      	; 0x22c <callibration+0x90>
 230:	00 c0       	rjmp	.+0      	; 0x232 <callibration+0x96>
		
		_delay_us(1500);
		b = ADC_read(2);
 232:	00 00       	nop
 234:	82 e0       	ldi	r24, 0x02	; 2
 236:	9a df       	rcall	.-204    	; 0x16c <ADC_read>
 238:	90 e0       	ldi	r25, 0x00	; 0
		if (b > *bmax)
 23a:	f8 01       	movw	r30, r16
 23c:	20 81       	ld	r18, Z
 23e:	31 81       	ldd	r19, Z+1	; 0x01
 240:	28 17       	cp	r18, r24
 242:	39 07       	cpc	r19, r25
 244:	1c f4       	brge	.+6      	; 0x24c <callibration+0xb0>
		*bmax = b;
 246:	91 83       	std	Z+1, r25	; 0x01
 248:	80 83       	st	Z, r24
 24a:	08 c0       	rjmp	.+16     	; 0x25c <callibration+0xc0>
		else if (b < *bmin)
 24c:	f3 01       	movw	r30, r6
 24e:	20 81       	ld	r18, Z
 250:	31 81       	ldd	r19, Z+1	; 0x01
 252:	82 17       	cp	r24, r18
 254:	93 07       	cpc	r25, r19
 256:	14 f4       	brge	.+4      	; 0x25c <callibration+0xc0>
		*bmin = b;
 258:	91 83       	std	Z+1, r25	; 0x01
 25a:	80 83       	st	Z, r24
 25c:	8f e6       	ldi	r24, 0x6F	; 111
 25e:	97 e1       	ldi	r25, 0x17	; 23
 260:	01 97       	sbiw	r24, 0x01	; 1
 262:	f1 f7       	brne	.-4      	; 0x260 <callibration+0xc4>
 264:	00 c0       	rjmp	.+0      	; 0x266 <callibration+0xca>
 266:	00 00       	nop
 268:	91 e0       	ldi	r25, 0x01	; 1
 26a:	e9 1a       	sub	r14, r25
 26c:	f1 08       	sbc	r15, r1
**/
void callibration(int *rmax, int *rmin,
int *gmax, int *gmin, int *bmax, int *bmin)
{
	int r = 0, g = 0, b = 0, i;
	for (i = 0; i < 1000; i++) {
 26e:	09 f0       	breq	.+2      	; 0x272 <callibration+0xd6>
 270:	ae cf       	rjmp	.-164    	; 0x1ce <callibration+0x32>
		else if (b < *bmin)
		*bmin = b;
		
		_delay_us(1500);
	}
 272:	df 91       	pop	r29
 274:	cf 91       	pop	r28
 276:	1f 91       	pop	r17
 278:	0f 91       	pop	r16
 27a:	ff 90       	pop	r15
 27c:	ef 90       	pop	r14
 27e:	df 90       	pop	r13
 280:	cf 90       	pop	r12
 282:	bf 90       	pop	r11
 284:	af 90       	pop	r10
 286:	9f 90       	pop	r9
 288:	8f 90       	pop	r8
 28a:	7f 90       	pop	r7
 28c:	6f 90       	pop	r6
 28e:	08 95       	ret

00000290 <main>:
void printUART(const char *str);
void callibration(int *rmax, int *rmin,
int *gmax, int *gmin, int *bmax, int *bmin);

int main(void)
{
 290:	cf 93       	push	r28
 292:	df 93       	push	r29
 294:	cd b7       	in	r28, 0x3d	; 61
 296:	de b7       	in	r29, 0x3e	; 62
 298:	2c 97       	sbiw	r28, 0x0c	; 12
 29a:	0f b6       	in	r0, 0x3f	; 63
 29c:	f8 94       	cli
 29e:	de bf       	out	0x3e, r29	; 62
 2a0:	0f be       	out	0x3f, r0	; 63
 2a2:	cd bf       	out	0x3d, r28	; 61
	int rmax = 0, gmax = 0, bmax = 0, rmin = 255, 
 2a4:	1a 82       	std	Y+2, r1	; 0x02
 2a6:	19 82       	std	Y+1, r1	; 0x01
 2a8:	1c 82       	std	Y+4, r1	; 0x04
 2aa:	1b 82       	std	Y+3, r1	; 0x03
 2ac:	1e 82       	std	Y+6, r1	; 0x06
 2ae:	1d 82       	std	Y+5, r1	; 0x05
 2b0:	aa 24       	eor	r10, r10
 2b2:	aa 94       	dec	r10
 2b4:	b1 2c       	mov	r11, r1
 2b6:	b8 86       	std	Y+8, r11	; 0x08
 2b8:	af 82       	std	Y+7, r10	; 0x07
	gmin = 255, bmin = 255;
 2ba:	ba 86       	std	Y+10, r11	; 0x0a
 2bc:	a9 86       	std	Y+9, r10	; 0x09
 2be:	bc 86       	std	Y+12, r11	; 0x0c
 2c0:	ab 86       	std	Y+11, r10	; 0x0b
	int rrange, grange, brange;
	uint8_t r = 0, g = 0, b = 0;

	write_rgb(255, 0, 0); /*Set light to red while calibrating*/
 2c2:	40 e0       	ldi	r20, 0x00	; 0
 2c4:	60 e0       	ldi	r22, 0x00	; 0
 2c6:	8f ef       	ldi	r24, 0xFF	; 255
 2c8:	eb de       	rcall	.-554    	; 0xa0 <write_rgb>
	ADC_Init(); /*Initialize the ADC*/
 2ca:	3f df       	rcall	.-386    	; 0x14a <ADC_Init>
 2cc:	ce 01       	movw	r24, r28
	callibration(&rmax, &rmin, &gmax, &gmin, &bmax, &bmin);
 2ce:	0b 96       	adiw	r24, 0x0b	; 11
 2d0:	7c 01       	movw	r14, r24
 2d2:	8e 01       	movw	r16, r28
 2d4:	0b 5f       	subi	r16, 0xFB	; 251
 2d6:	1f 4f       	sbci	r17, 0xFF	; 255
 2d8:	9e 01       	movw	r18, r28
 2da:	27 5f       	subi	r18, 0xF7	; 247
 2dc:	3f 4f       	sbci	r19, 0xFF	; 255
 2de:	ae 01       	movw	r20, r28
 2e0:	4d 5f       	subi	r20, 0xFD	; 253
 2e2:	5f 4f       	sbci	r21, 0xFF	; 255
 2e4:	be 01       	movw	r22, r28
 2e6:	69 5f       	subi	r22, 0xF9	; 249
 2e8:	7f 4f       	sbci	r23, 0xFF	; 255
 2ea:	0a 97       	sbiw	r24, 0x0a	; 10
 2ec:	57 df       	rcall	.-338    	; 0x19c <callibration>
 2ee:	40 e0       	ldi	r20, 0x00	; 0
	write_rgb(0, 255, 0); /*Set light to green after calibrating*/
 2f0:	6f ef       	ldi	r22, 0xFF	; 255
 2f2:	80 e0       	ldi	r24, 0x00	; 0
 2f4:	d5 de       	rcall	.-598    	; 0xa0 <write_rgb>
 2f6:	9f ef       	ldi	r25, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2f8:	29 e6       	ldi	r18, 0x69	; 105
 2fa:	88 e1       	ldi	r24, 0x18	; 24
 2fc:	91 50       	subi	r25, 0x01	; 1
 2fe:	20 40       	sbci	r18, 0x00	; 0
 300:	80 40       	sbci	r24, 0x00	; 0
 302:	e1 f7       	brne	.-8      	; 0x2fc <main+0x6c>
 304:	00 c0       	rjmp	.+0      	; 0x306 <main+0x76>
 306:	00 00       	nop
 308:	69 81       	ldd	r22, Y+1	; 0x01
	_delay_ms(500);
	
	rrange = 255/(rmax-rmin);
 30a:	7a 81       	ldd	r23, Y+2	; 0x02
 30c:	8f 81       	ldd	r24, Y+7	; 0x07
 30e:	98 85       	ldd	r25, Y+8	; 0x08
 310:	68 1b       	sub	r22, r24
 312:	79 0b       	sbc	r23, r25
 314:	c5 01       	movw	r24, r10
 316:	47 d0       	rcall	.+142    	; 0x3a6 <__divmodhi4>
 318:	d6 2e       	mov	r13, r22
 31a:	6b 81       	ldd	r22, Y+3	; 0x03
	grange = 255/(gmax-gmin);
 31c:	7c 81       	ldd	r23, Y+4	; 0x04
 31e:	89 85       	ldd	r24, Y+9	; 0x09
 320:	9a 85       	ldd	r25, Y+10	; 0x0a
 322:	68 1b       	sub	r22, r24
 324:	79 0b       	sbc	r23, r25
 326:	c5 01       	movw	r24, r10
 328:	3e d0       	rcall	.+124    	; 0x3a6 <__divmodhi4>
 32a:	e6 2e       	mov	r14, r22
 32c:	6d 81       	ldd	r22, Y+5	; 0x05
	brange = 255/(bmax-bmin);
 32e:	7e 81       	ldd	r23, Y+6	; 0x06
 330:	8b 85       	ldd	r24, Y+11	; 0x0b
 332:	9c 85       	ldd	r25, Y+12	; 0x0c
 334:	68 1b       	sub	r22, r24
 336:	79 0b       	sbc	r23, r25
 338:	c5 01       	movw	r24, r10
 33a:	35 d0       	rcall	.+106    	; 0x3a6 <__divmodhi4>
 33c:	f6 2e       	mov	r15, r22
	
	while (1) {
		r = ADC_read(0);
 33e:	80 e0       	ldi	r24, 0x00	; 0
 340:	15 df       	rcall	.-470    	; 0x16c <ADC_read>
 342:	9f 81       	ldd	r25, Y+7	; 0x07
		r = (r-rmin)*rrange;
 344:	89 1b       	sub	r24, r25
 346:	8d 9d       	mul	r24, r13
 348:	10 2d       	mov	r17, r0
 34a:	11 24       	eor	r1, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 34c:	87 e5       	ldi	r24, 0x57	; 87
 34e:	92 e0       	ldi	r25, 0x02	; 2
 350:	01 97       	sbiw	r24, 0x01	; 1
 352:	f1 f7       	brne	.-4      	; 0x350 <main+0xc0>
 354:	00 c0       	rjmp	.+0      	; 0x356 <main+0xc6>
 356:	00 00       	nop
		_delay_us(150);
		
		g = ADC_read(1);
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	08 df       	rcall	.-496    	; 0x16c <ADC_read>
 35c:	99 85       	ldd	r25, Y+9	; 0x09
		g = (g-gmin)*grange;
 35e:	89 1b       	sub	r24, r25
 360:	8e 9d       	mul	r24, r14
 362:	00 2d       	mov	r16, r0
 364:	11 24       	eor	r1, r1
 366:	87 e5       	ldi	r24, 0x57	; 87
 368:	92 e0       	ldi	r25, 0x02	; 2
 36a:	01 97       	sbiw	r24, 0x01	; 1
 36c:	f1 f7       	brne	.-4      	; 0x36a <main+0xda>
 36e:	00 c0       	rjmp	.+0      	; 0x370 <main+0xe0>
 370:	00 00       	nop
		_delay_us(150);
		
		b = ADC_read(2);
 372:	82 e0       	ldi	r24, 0x02	; 2
 374:	fb de       	rcall	.-522    	; 0x16c <ADC_read>
 376:	9b 85       	ldd	r25, Y+11	; 0x0b
		b = (b-bmin)*brange;
 378:	89 1b       	sub	r24, r25
 37a:	8f 9d       	mul	r24, r15
 37c:	40 2d       	mov	r20, r0
 37e:	11 24       	eor	r1, r1
 380:	1e 31       	cpi	r17, 0x1E	; 30
		
		/*set bounds for RGB values*/
		if (r < 30)
 382:	08 f4       	brcc	.+2      	; 0x386 <main+0xf6>
			r = 0;
 384:	10 e0       	ldi	r17, 0x00	; 0
		else if (r > 255)
			r = 255;
		
		if (g < 30)
 386:	0e 31       	cpi	r16, 0x1E	; 30
 388:	08 f4       	brcc	.+2      	; 0x38c <main+0xfc>
			g = 0;
 38a:	00 e0       	ldi	r16, 0x00	; 0
		else if (g > 255)
			g = 255;
	
		if (b < 30)
 38c:	4e 31       	cpi	r20, 0x1E	; 30
 38e:	08 f4       	brcc	.+2      	; 0x392 <main+0x102>
			b = 0;
 390:	40 e0       	ldi	r20, 0x00	; 0
		else if (b > 255)
			b = 255;

		write_rgb(r, g, b);
 392:	60 2f       	mov	r22, r16
 394:	81 2f       	mov	r24, r17
 396:	84 de       	rcall	.-760    	; 0xa0 <write_rgb>
 398:	8f e1       	ldi	r24, 0x1F	; 31
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 39a:	9e e4       	ldi	r25, 0x4E	; 78
 39c:	01 97       	sbiw	r24, 0x01	; 1
 39e:	f1 f7       	brne	.-4      	; 0x39c <main+0x10c>
 3a0:	00 c0       	rjmp	.+0      	; 0x3a2 <main+0x112>
 3a2:	00 00       	nop
 3a4:	cc cf       	rjmp	.-104    	; 0x33e <main+0xae>

000003a6 <__divmodhi4>:
 3a6:	97 fb       	bst	r25, 7
 3a8:	07 2e       	mov	r0, r23
 3aa:	16 f4       	brtc	.+4      	; 0x3b0 <__divmodhi4+0xa>
 3ac:	00 94       	com	r0
 3ae:	06 d0       	rcall	.+12     	; 0x3bc <__divmodhi4_neg1>
 3b0:	77 fd       	sbrc	r23, 7
 3b2:	08 d0       	rcall	.+16     	; 0x3c4 <__divmodhi4_neg2>
 3b4:	0b d0       	rcall	.+22     	; 0x3cc <__udivmodhi4>
 3b6:	07 fc       	sbrc	r0, 7
 3b8:	05 d0       	rcall	.+10     	; 0x3c4 <__divmodhi4_neg2>
 3ba:	3e f4       	brtc	.+14     	; 0x3ca <__divmodhi4_exit>

000003bc <__divmodhi4_neg1>:
 3bc:	90 95       	com	r25
 3be:	81 95       	neg	r24
 3c0:	9f 4f       	sbci	r25, 0xFF	; 255
 3c2:	08 95       	ret

000003c4 <__divmodhi4_neg2>:
 3c4:	70 95       	com	r23
 3c6:	61 95       	neg	r22
 3c8:	7f 4f       	sbci	r23, 0xFF	; 255

000003ca <__divmodhi4_exit>:
 3ca:	08 95       	ret

000003cc <__udivmodhi4>:
 3cc:	aa 1b       	sub	r26, r26
 3ce:	bb 1b       	sub	r27, r27
 3d0:	51 e1       	ldi	r21, 0x11	; 17
 3d2:	07 c0       	rjmp	.+14     	; 0x3e2 <__udivmodhi4_ep>

000003d4 <__udivmodhi4_loop>:
 3d4:	aa 1f       	adc	r26, r26
 3d6:	bb 1f       	adc	r27, r27
 3d8:	a6 17       	cp	r26, r22
 3da:	b7 07       	cpc	r27, r23
 3dc:	10 f0       	brcs	.+4      	; 0x3e2 <__udivmodhi4_ep>
 3de:	a6 1b       	sub	r26, r22
 3e0:	b7 0b       	sbc	r27, r23

000003e2 <__udivmodhi4_ep>:
 3e2:	88 1f       	adc	r24, r24
 3e4:	99 1f       	adc	r25, r25
 3e6:	5a 95       	dec	r21
 3e8:	a9 f7       	brne	.-22     	; 0x3d4 <__udivmodhi4_loop>
 3ea:	80 95       	com	r24
 3ec:	90 95       	com	r25
 3ee:	bc 01       	movw	r22, r24
 3f0:	cd 01       	movw	r24, r26
 3f2:	08 95       	ret

000003f4 <_exit>:
 3f4:	f8 94       	cli

000003f6 <__stop_program>:
 3f6:	ff cf       	rjmp	.-2      	; 0x3f6 <__stop_program>
